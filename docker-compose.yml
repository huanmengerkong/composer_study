version: '2.2'
services:
   nginx:
      hostname: nginx    
      container_name: nginx
      image: nginx
      expose:
         - "80"
      ports:
         - "8080:80"
      volumes:
         - ./app/project:/var/www/html
         - ./app/config/nginx/conf.d:/etc/nginx/conf.d:ro
         - ./app/log:/var/log/nginx
      #working_dir: /app
      #links:
      # - fpm74:fpm74
      depends_on:      
         - fpm74
      networks:
         - fronted
         - backend      
      command: [nginx-debug, '-g', 'daemon off;']
   fpm74:
      hostname: fpm74
      container_name: fpm74
      #build: ./fpm73-ext-docker
      image: registry.cn-shanghai.aliyuncs.com/huanmengerkong/fpm74:1.0
      expose: 
         - "9000"
      ports:
         - "9008:9000"
      volumes:
         - ./app/project:/var/www/html
         #- ./app/config/php/conf.d:/usr/local/etc/php
            #working_dir:  /var/www/html
      depends_on:
         - mysql
         - redis
      #links:
      #   - mysql:mysql
      #  - redis:redis
      #  - mongo:mongo  
      networks:
         - fronted
         - backend     
   mysql:
      hostname: db     
      container_name: db
      image: mysql:latest
      command: --default-authentication-plugin=mysql_native_password
      restart: always
      expose:
         - "3306"
      ports:
         - "3307:3306"
      volumes:
         - ./app/mysql:/var/lib/mysql
      environment:
         MYSQL_ROOT_PASSWORD: root
         MYSQL_USER: test
         MYSQL_PASSWORD: root
         TZ: Asia/Shanghai
      networks:
         - backend     
   redis:
      hostname: redis     
      container_name: redis
      image: redis
      restart: always
      expose:
         - "6379"
      ports:
         - "6380:6379"
      volumes:
         - ./app/redis:/data
      command: redis-server --appendonly yes
      networks:
         - backend
         - fronted   
      logging:
         driver: json-file
         options:
            max-size: "200k" # 单个文件大小为200k
            max-file: "10" # 最多10个文件
   mongo:
      hostname: mongo     
      image: mongo
      container_name: mongo_db
      restart: always    
      environment:
         MONGO_INITDB_ROOT_USERNAME: root
         MONGO_INITDB_ROOT_PASSWORD: root
      expose: 
         - "27017"
      ports: 
         - "27017:27017"
      networks:
         - backend
         - fronted    
   mongo-express:
      image: mongo-express
      restart: always
      ports:
         - 8081:8081
      depends_on: 
         - mongo   
      environment:
         ME_CONFIG_MONGODB_ADMINUSERNAME: root
         ME_CONFIG_MONGODB_ADMINPASSWORD: root           
         #ME_CONFIG_BASICAUTH_USERNAME: root
         #ME_CONFIG_BASICAUTH_PASSWORD: root
         ME_CONFIG_MONGODB_URL: mongodb://root:root@mongo:27017/
   #links:
         # - mongo:mongo        
      networks:
         - backend
         - fronted   
   phpmyadmin:
      image: phpmyadmin
      restart: always
      ports:
         - 8087:80
      depends_on:
         - mysql    
      environment:
         - PMA_ARBITRARY=1        
      networks:
         - backend
   golang:                                # 自定义容器名称
      build:
         context: ./golang                  # 指定构建使用的 Dockerfile 文件
      environment:                         # 设置环境变量
         - TZ=${TZ}
      privileged: true
      volumes:                             # 设置挂载目录
         - ${CODE_PATH_HOST}:/usr/src/code  # 引用 .env 配置中 CODE_PATH_HOST 变量，将宿主机上代码存放的目录挂载到容器中 /usr/src/code 目录
      ports:                               # 设置端口映射
         - "8000:8000"
         - "8001:8001"
         - "8002:8002"
         - "8003:8003"
         - "9000:9000"
         - "9001:9001"
         - "9002:9002"
         - "9003:9003"
         - "8091:8091"
      stdin_open: true                     # 打开标准输入，可以接受外部输入
      tty: true
      networks:
         - fronted
         - backend   
      restart: always                      # 指定容器退出后的重启策略为始终重启

   etcd:                                  # 自定义容器名称
      build:
         context: ./etcd                    # 指定构建使用的 Dockerfile 文件
      environment:
         - TZ=${TZ}
         - ALLOW_NONE_AUTHENTICATION=yes
         - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
      ports:                               # 设置端口映射
         - "${ETCD_PORT}:2379"
      networks:
         - backend
      restart: always
   etcd-manage:
      build:
         context: ./etcd-manage
      environment:
         - TZ=${TZ}
      ports:
         - "${ETCD_MANAGE_PORT}:8080"                    # 设置容器8080端口映射指定宿主机端口，用于宿主机访问可视化web
      depends_on:                                       # 依赖容器
         - etcd                                          # 在 etcd 服务容器启动后启动
      networks:
         - backend
      restart: always

   prometheus:
      build:
         context: ./prometheus
      environment:
         - TZ=${TZ}
      privileged: true
      volumes:
         - ./prometheus/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml  # 将 prometheus 配置文件挂载到容器里
      ports:
         - "${PROMETHEUS_PORT}:9090"                     # 设置容器9090端口映射指定宿主机端口，用于宿主机访问可视化web
      networks:
         - backend
      restart: always

   grafana:
      build:
         context: ./grafana
      environment:
         - TZ=${TZ}
      ports:
         - "${GRAFANA_PORT}:3000"                        # 设置容器3000端口映射指定宿主机端口，用于宿主机访问可视化web
      networks:
         - backend
      restart: always

   jaeger:
      build:
         context: ./jaeger
      environment:
         - TZ=${TZ}
      ports:
         - "${JAEGER_PORT}:16686"                        # 设置容器16686端口映射指定宿主机端口，用于宿主机访问可视化web
      networks:
         - backend
      restart: always

   dtm:
      build:
         context: ./dtm
      environment:
         - TZ=${TZ}
      entrypoint:
         - "/app/dtm/dtm"
         - "-c=/app/dtm/configs/config.yaml"
      privileged: true
      volumes:
         - ./dtm/config.yml:/app/dtm/configs/config.yaml # 将 dtm 配置文件挂载到容器里
      ports:
         - "${DTM_HTTP_PORT}:36789"
         - "${DTM_GRPC_PORT}:36790"
      networks:
         - backend
      restart: always       
networks: 
   fronted:
      driver: bridge     
   backend:        
      driver: bridge
